Procedure
-----------------------
BEGIN 

SET @jp_ids = (SELECT GROUP_CONCAT(id) FROM jobs_personalities WHERE deleted IS NULL);
SET @p_ids = (SELECT GROUP_CONCAT(id) FROM personalities WHERE name LIKE '%キャビンアテンダント%' AND personality_id IN (@jp_ids) AND deleted IS NULL );
SET @ps_ids = (SELECT GROUP_CONCAT(id) FROM practical_skills WHERE name LIKE '%キャビンアテンダント%' AND deleted IS NULL);
SET @jt_ids = (SELECT GROUP_CONCAT(id) FROM job_types WHERE name LIKE '%キャビンアテンダント%' AND deleted IS NULL);
SET @ba_ids = (SELECT GROUP_CONCAT(id) FROM basic_abilities WHERE name LIKE '%キャビンアテンダント%' AND deleted IS NULL);
SET @jt_ids = (SELECT GROUP_CONCAT(id) FROM jobs_tools WHERE name LIKE '%キャビンアテンダント%');
SET @a_ids = (SELECT GROUP_CONCAT(id) FROM affiliates WHERE name LIKE '%キャビンアテンダント%' AND (type=1 OR type=2 OR type=3) AND deleted IS NULL );
SET @jc_ids = (SELECT GROUP_CONCAT(id) FROM job_categories WHERE name LIKE '%キャビンアテンダント%' AND deleted IS NULL);

SET @conditions = ((jc.name LIKE '%キャビンアテンダント%' OR jt.name LIKE '%キャビンアテンダント%' OR j.name LIKE '%キャビンアテンダント%' OR j.description LIKE '%キャビンアテンダント%'
    OR j.detail LIKE '%キャビンアテンダント%キャビン' OR j.business_skill LIKE '%キャビンアテンダント%' OR j.knowledge LIKE '%キャビンアテンダント%'
    OR j.location LIKE '%キャビンアテンダント%' OR j.activity LIKE '%キャビンアテンダント%' OR j.salary_statistic_group LIKE '%キャビンアテンダント%'
    OR j.salary_range_remarks LIKE '%キャビンアテンダント%' OR j.restriction LIKE '%キャビンアテンダント%' OR j.remarks LIKE '%キャビンアテンダント%'
    OR j.personality_id IN (@p_ids) OR j.practical_skill_id IN (@ps_ids) OR j.basic_ability_id IN (@ba_ids) OR j.affiliate_id IN (@a_ids) OR j.jt_ids IN (@a_ids)
    OR j.job_categories_ids  IN (@a_ids))
    AND publish_status = 1
    AND (j.deleted) IS NULL);

SELECT j.id AS `Jobs__id`,
  j.name AS `Jobs__name`,
  j.media_id AS `Jobs__media_id`,
  j.job_category_id AS `Jobs__job_category_id`, 
  j.job_type_id AS `Jobs__job_type_id`,
  j.description AS `Jobs__description`,
  j.detail AS `Jobs__detail`,
  j.business_skill AS `Jobs__business_skill`,
  j.knowledge AS `Jobs__knowledge`,
  j.location AS `Jobs__location`,
  j.activity AS `Jobs__activity`,
  j.academic_degree_doctor AS `Jobs__academic_degree_doctor`,
  j.academic_degree_master AS `Jobs__academic_degree_master`,
  j.academic_degree_professional AS `Jobs__academic_degree_professional`,
  j.academic_degree_bachelor AS `Jobs__academic_degree_bachelor`,
  j.salary_statistic_group AS `Jobs__salary_statistic_group`,
  j.salary_range_first_year AS `Jobs__salary_range_first_year`,
  j.salary_range_average AS `Jobs__salary_range_average`,
  j.salary_range_remarks AS `Jobs__salary_range_remarks`,
  j.restriction AS `Jobs__restriction`,
  j.estimated_total_workers AS `Jobs__estimated_total_workers`,
  j.remarks AS `Jobs__remarks`,
  j.url AS `Jobs__url`,
  j.seo_description AS `Jobs__seo_description`,
  j.seo_keywords AS `Jobs__seo_keywords`,
  j.sort_order AS `Jobs__sort_order`,
  j.publish_status AS `Jobs__publish_status`,
  j.version AS `Jobs__version`,
  j.created_by AS `Jobs__created_by`,
  j.created AS `Jobs__created`,
  j.modified AS `Jobs__modified`,
  j.deleted AS `Jobs__deleted`,
  jc.id AS `JobCategories__id`,
  jc.name AS `JobCategories__name`,
  jc.sort_order AS `JobCategories__sort_order`,
  jc.created_by AS `JobCategories__created_by`,
  jc.created AS `JobCategories__created`,
  jc.modified AS `JobCategories__modified`,
  jc.deleted AS `JobCategories__deleted`,
  jt.id AS `JobTypes__id`,
  jt.name AS `JobTypes__name`,
  jt.job_category_id AS `JobTypes__job_category_id`,
  jt.sort_order AS `JobTypes__sort_order`,
  jt.created_by AS `JobTypes__created_by`,
  jt.created AS `JobTypes__created`,
  jt.modified AS `JobTypes__modified`,
  jt.deleted AS `JobTypes__deleted`
FROM jobs AS j
INNER JOIN job_categories AS jc
  ON (jc.id = (j.job_category_id)
INNER JOIN job_types AS jt
  ON (jt.id = (j.job_type_id)
WHERE @conditions
ORDER BY j.sort_order desc,
    j.id DESC LIMIT 50 OFFSET 0

END


Solution to optimize query:
-------------------------------------
•	Avoid using wildcard (%) in the beginning of a predicate
•	Avoid unnecessary columns in SELECT clause if it is necessary
•	Use inner join, instead of outer join if possible
•	Use DISTINCT and UNION only if it is necessary
